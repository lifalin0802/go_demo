// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package job

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Job) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Job[number], err)
}

func (x *Job) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Job) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Job) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.TargetNodes = append(x.TargetNodes, v)
	return offset, err
}

func (x *Job) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v Task
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Tasks = append(x.Tasks, &v)
	return offset, nil
}

func (x *Task) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Task[number], err)
}

func (x *Task) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Task) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Task) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Operator
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Operators = append(x.Operators, &v)
	return offset, nil
}

func (x *Operator) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Operator[number], err)
}

func (x *Operator) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Operator) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Operator) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Operator) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Operator) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Vars = append(x.Vars, v)
	return offset, err
}

func (x *Operator) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OutVars = append(x.OutVars, v)
	return offset, err
}

func (x *Operator) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Timeout, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CreateJobResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateJobResp[number], err)
}

func (x *CreateJobResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.JobId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Job) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Job) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Job) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Job) fastWriteField3(buf []byte) (offset int) {
	if len(x.TargetNodes) == 0 {
		return offset
	}
	for i := range x.GetTargetNodes() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetTargetNodes()[i])
	}
	return offset
}

func (x *Job) fastWriteField4(buf []byte) (offset int) {
	if x.Tasks == nil {
		return offset
	}
	for i := range x.GetTasks() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetTasks()[i])
	}
	return offset
}

func (x *Task) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Task) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Task) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Task) fastWriteField3(buf []byte) (offset int) {
	if x.Operators == nil {
		return offset
	}
	for i := range x.GetOperators() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetOperators()[i])
	}
	return offset
}

func (x *Operator) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Operator) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Operator) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Operator) fastWriteField3(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetType())
	return offset
}

func (x *Operator) fastWriteField4(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetContent())
	return offset
}

func (x *Operator) fastWriteField5(buf []byte) (offset int) {
	if len(x.Vars) == 0 {
		return offset
	}
	for i := range x.GetVars() {
		offset += fastpb.WriteString(buf[offset:], 5, x.GetVars()[i])
	}
	return offset
}

func (x *Operator) fastWriteField7(buf []byte) (offset int) {
	if len(x.OutVars) == 0 {
		return offset
	}
	for i := range x.GetOutVars() {
		offset += fastpb.WriteString(buf[offset:], 7, x.GetOutVars()[i])
	}
	return offset
}

func (x *Operator) fastWriteField8(buf []byte) (offset int) {
	if x.Timeout == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 8, x.GetTimeout())
	return offset
}

func (x *CreateJobResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateJobResp) fastWriteField1(buf []byte) (offset int) {
	if x.JobId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetJobId())
	return offset
}

func (x *Job) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Job) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Job) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Job) sizeField3() (n int) {
	if len(x.TargetNodes) == 0 {
		return n
	}
	for i := range x.GetTargetNodes() {
		n += fastpb.SizeString(3, x.GetTargetNodes()[i])
	}
	return n
}

func (x *Job) sizeField4() (n int) {
	if x.Tasks == nil {
		return n
	}
	for i := range x.GetTasks() {
		n += fastpb.SizeMessage(4, x.GetTasks()[i])
	}
	return n
}

func (x *Task) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Task) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Task) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Task) sizeField3() (n int) {
	if x.Operators == nil {
		return n
	}
	for i := range x.GetOperators() {
		n += fastpb.SizeMessage(3, x.GetOperators()[i])
	}
	return n
}

func (x *Operator) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Operator) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Operator) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Operator) sizeField3() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetType())
	return n
}

func (x *Operator) sizeField4() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetContent())
	return n
}

func (x *Operator) sizeField5() (n int) {
	if len(x.Vars) == 0 {
		return n
	}
	for i := range x.GetVars() {
		n += fastpb.SizeString(5, x.GetVars()[i])
	}
	return n
}

func (x *Operator) sizeField7() (n int) {
	if len(x.OutVars) == 0 {
		return n
	}
	for i := range x.GetOutVars() {
		n += fastpb.SizeString(7, x.GetOutVars()[i])
	}
	return n
}

func (x *Operator) sizeField8() (n int) {
	if x.Timeout == 0 {
		return n
	}
	n += fastpb.SizeInt32(8, x.GetTimeout())
	return n
}

func (x *CreateJobResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateJobResp) sizeField1() (n int) {
	if x.JobId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetJobId())
	return n
}

var fieldIDToName_Job = map[int32]string{
	1: "Id",
	2: "Name",
	3: "TargetNodes",
	4: "Tasks",
}

var fieldIDToName_Task = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Operators",
}

var fieldIDToName_Operator = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Type",
	4: "Content",
	5: "Vars",
	7: "OutVars",
	8: "Timeout",
}

var fieldIDToName_CreateJobResp = map[int32]string{
	1: "JobId",
}
